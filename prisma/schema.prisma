generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             Int               @id @default(autoincrement())
  login               String            @unique
  name                String
  picture             String?
  email               String            @unique
  password            String
  role_id             Int
  group_id            Int
  account_status      Boolean           @default(true)
  last_studied_blocks String?
  last_taught_blocks  String?
  available_blocks    String?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  blocks              Block[]
  learning_outcomes   LearningOutcome[]
  group               Group             @relation(fields: [group_id], references: [group_id])
  role                Role              @relation(fields: [role_id], references: [role_id])
}

model Group {
  group_id   Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model Role {
  role_id    Int      @id @default(autoincrement())
  number     Int
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      User[]
}

model Block {
  block_id          Int               @id @default(autoincrement())
  name              String
  owner_id          Int
  is_saved          Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  is_saved          Boolean           @default(false)
  owner             User              @relation(fields: [owner_id], references: [user_id])
  learning_outcomes LearningOutcome[]
  subblock_orders   SubblockOrder[]
}

model SubblockOrder {
  subblock_order_id       Int                  @id @default(autoincrement())
  block_id                Int
  order                   Int
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
  subblock_description_id Int?
  subblock_test_id        Int?
  name                    String?
  subblock_pronounce_id   Int?
  block                   Block                @relation(fields: [block_id], references: [block_id], onDelete: Cascade)
  subblock_description    SubblockDescription? @relation(fields: [subblock_description_id], references: [subblock_description_id])
  subblock_pronounce      SubblockPronounce?   @relation(fields: [subblock_pronounce_id], references: [subblock_pronounce_id])
  subblock_test           SubblockTest?        @relation(fields: [subblock_test_id], references: [subblock_test_id])
}

model SubblockPronounce {
  subblock_pronounce_id Int             @id @default(autoincrement())
  subblock_type_id      Int
  name                  String
  description           String
  value                 String
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt
  subblock_orders       SubblockOrder[]
  subblock_type         SubblockType    @relation(fields: [subblock_type_id], references: [subblock_type_id])
}

model SubblockDescription {
  subblock_description_id Int             @id @default(autoincrement())
  subblock_type_id        Int
  description             String
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt
  subblock_type           SubblockType    @relation(fields: [subblock_type_id], references: [subblock_type_id])
  subblock_orders         SubblockOrder[]
}

model SubblockType {
  subblock_type_id    Int                   @id @default(autoincrement())
  number              Int
  name                String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  SubblockDescription SubblockDescription[]
  SubblockPronounce   SubblockPronounce[]
  SubblockTest        SubblockTest[]
}

model SubblockTest {
  subblock_test_id Int             @id @default(autoincrement())
  subblock_type_id Int
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  test_questions   QuestionTest[]
  subblock_orders  SubblockOrder[]
  subblock_type    SubblockType    @relation(fields: [subblock_type_id], references: [subblock_type_id])
}

model QuestionTest {
  question_test_id Int          @id @default(autoincrement())
  subblock_test_id Int
  order            Int
  question         String
  record           String?
  video            String?
  picture          String?
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  answer_tests     AnswerTest[]
  subblock_test    SubblockTest @relation(fields: [subblock_test_id], references: [subblock_test_id], onDelete: Cascade)
}

model AnswerTest {
  answer_test_id   Int          @id @default(autoincrement())
  question_test_id Int
  order            Int
  name             String
  is_answer        Boolean
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  question_test    QuestionTest @relation(fields: [question_test_id], references: [question_test_id], onDelete: Cascade)
}

model LearningOutcome {
  learning_outcome_id Int      @id @default(autoincrement())
  user_id             Int
  block_id            Int
  grade               Int
  finished_at         DateTime @default(now())
  block               Block    @relation(fields: [block_id], references: [block_id])
  user                User     @relation(fields: [user_id], references: [user_id])
}
